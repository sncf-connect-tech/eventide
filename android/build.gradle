buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:8.8.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'jacoco'
}

group 'sncf.connect.tech.eventide'
version '1.0-SNAPSHOT'

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

android {
    compileSdk 35

    if (project.android.hasProperty("namespace")) {
        namespace 'sncf.connect.tech.eventide'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion flutter.minSdkVersion
    }

    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation "io.mockk:mockk:1.13.13"
        testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0"
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }

        unitTests.returnDefaultValues = true
    }
    ndkVersion '27.0.12077973'
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'

    reports {
        xml.required = true
        xml.outputLocation.set(file("$project.projectDir/build/reports/jacocoTestReport.xml"))
        html.required = true
        html.outputLocation.set(file("$project.projectDir/build/reports/html"))
        csv.required = false
    }

    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
    ] // ignore pigeon generated files
    def mainSrc = "${project.projectDir}/src/main/kotlin/sncf/connect/tech/eventide/"

    sourceDirectories.setFrom(files(mainSrc))
    classDirectories.setFrom(files("${buildDir}/intermediates/runtime_library_classes_dir/debug/sncf/connect/tech/eventide/").asFileTree.matching {
        exclude fileFilter
    })
    executionData.setFrom(files("${buildDir}/jacoco/testDebugUnitTest.exec"))
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

dependencies {
    implementation("androidx.activity:activity-ktx:1.10.1")
    implementation("androidx.fragment:fragment-ktx:1.8.6")
}
