// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsCalendarApi(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsCalendarApi(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsCalendarApi(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashCalendarApi(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashCalendarApi(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashCalendarApi(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Generated class from Pigeon that represents data sent in messages.
struct Calendar: Hashable {
  var id: String
  var title: String
  var color: Int64
  var isWritable: Bool
  var account: Account


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Calendar? {
    let id = pigeonVar_list[0] as! String
    let title = pigeonVar_list[1] as! String
    let color = pigeonVar_list[2] as! Int64
    let isWritable = pigeonVar_list[3] as! Bool
    let account = pigeonVar_list[4] as! Account

    return Calendar(
      id: id,
      title: title,
      color: color,
      isWritable: isWritable,
      account: account
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      title,
      color,
      isWritable,
      account,
    ]
  }
  static func == (lhs: Calendar, rhs: Calendar) -> Bool {
    return deepEqualsCalendarApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashCalendarApi(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Event: Hashable {
  var id: String
  var calendarId: String
  var title: String
  var isAllDay: Bool
  var startDate: Int64
  var endDate: Int64
  var reminders: [Int64]
  var attendees: [Attendee]
  var description: String? = nil
  var url: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Event? {
    let id = pigeonVar_list[0] as! String
    let calendarId = pigeonVar_list[1] as! String
    let title = pigeonVar_list[2] as! String
    let isAllDay = pigeonVar_list[3] as! Bool
    let startDate = pigeonVar_list[4] as! Int64
    let endDate = pigeonVar_list[5] as! Int64
    let reminders = pigeonVar_list[6] as! [Int64]
    let attendees = pigeonVar_list[7] as! [Attendee]
    let description: String? = nilOrValue(pigeonVar_list[8])
    let url: String? = nilOrValue(pigeonVar_list[9])

    return Event(
      id: id,
      calendarId: calendarId,
      title: title,
      isAllDay: isAllDay,
      startDate: startDate,
      endDate: endDate,
      reminders: reminders,
      attendees: attendees,
      description: description,
      url: url
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      calendarId,
      title,
      isAllDay,
      startDate,
      endDate,
      reminders,
      attendees,
      description,
      url,
    ]
  }
  static func == (lhs: Event, rhs: Event) -> Bool {
    return deepEqualsCalendarApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashCalendarApi(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Account: Hashable {
  var name: String
  var type: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Account? {
    let name = pigeonVar_list[0] as! String
    let type = pigeonVar_list[1] as! String

    return Account(
      name: name,
      type: type
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      type,
    ]
  }
  static func == (lhs: Account, rhs: Account) -> Bool {
    return deepEqualsCalendarApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashCalendarApi(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Attendee: Hashable {
  var name: String
  var email: String
  var type: Int64
  var role: Int64
  var status: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Attendee? {
    let name = pigeonVar_list[0] as! String
    let email = pigeonVar_list[1] as! String
    let type = pigeonVar_list[2] as! Int64
    let role = pigeonVar_list[3] as! Int64
    let status = pigeonVar_list[4] as! Int64

    return Attendee(
      name: name,
      email: email,
      type: type,
      role: role,
      status: status
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      email,
      type,
      role,
      status,
    ]
  }
  static func == (lhs: Attendee, rhs: Attendee) -> Bool {
    return deepEqualsCalendarApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashCalendarApi(value: toList(), hasher: &hasher)
  }
}

private class CalendarApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return Calendar.fromList(self.readValue() as! [Any?])
    case 130:
      return Event.fromList(self.readValue() as! [Any?])
    case 131:
      return Account.fromList(self.readValue() as! [Any?])
    case 132:
      return Attendee.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class CalendarApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Calendar {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? Event {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? Account {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? Attendee {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class CalendarApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CalendarApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CalendarApiPigeonCodecWriter(data: data)
  }
}

class CalendarApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = CalendarApiPigeonCodec(readerWriter: CalendarApiPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CalendarApi {
  func createCalendar(title: String, color: Int64, localAccountName: String, completion: @escaping (Result<Calendar, Error>) -> Void)
  func retrieveCalendars(onlyWritableCalendars: Bool, fromLocalAccountName: String?, completion: @escaping (Result<[Calendar], Error>) -> Void)
  func deleteCalendar(_ calendarId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func createEvent(calendarId: String, title: String, startDate: Int64, endDate: Int64, isAllDay: Bool, description: String?, url: String?, reminders: [Int64]?, completion: @escaping (Result<Event, Error>) -> Void)
  func createEventInDefaultCalendar(title: String, startDate: Int64, endDate: Int64, isAllDay: Bool, description: String?, url: String?, reminders: [Int64]?, completion: @escaping (Result<Void, Error>) -> Void)
  func createEventThroughNativePlatform(title: String?, startDate: Int64?, endDate: Int64?, isAllDay: Bool?, description: String?, url: String?, reminders: [Int64]?, completion: @escaping (Result<Void, Error>) -> Void)
  func retrieveEvents(calendarId: String, startDate: Int64, endDate: Int64, completion: @escaping (Result<[Event], Error>) -> Void)
  func deleteEvent(withId eventId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func createReminder(_ reminder: Int64, forEventId eventId: String, completion: @escaping (Result<Event, Error>) -> Void)
  func deleteReminder(_ reminder: Int64, withEventId eventId: String, completion: @escaping (Result<Event, Error>) -> Void)
  func createAttendee(eventId: String, name: String, email: String, role: Int64, type: Int64, completion: @escaping (Result<Event, Error>) -> Void)
  func deleteAttendee(eventId: String, email: String, completion: @escaping (Result<Event, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CalendarApiSetup {
  static var codec: FlutterStandardMessageCodec { CalendarApiPigeonCodec.shared }
  /// Sets up an instance of `CalendarApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CalendarApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let createCalendarChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eventide.CalendarApi.createCalendar\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createCalendarChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let titleArg = args[0] as! String
        let colorArg = args[1] as! Int64
        let localAccountNameArg = args[2] as! String
        api.createCalendar(title: titleArg, color: colorArg, localAccountName: localAccountNameArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createCalendarChannel.setMessageHandler(nil)
    }
    let retrieveCalendarsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eventide.CalendarApi.retrieveCalendars\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      retrieveCalendarsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let onlyWritableCalendarsArg = args[0] as! Bool
        let fromLocalAccountNameArg: String? = nilOrValue(args[1])
        api.retrieveCalendars(onlyWritableCalendars: onlyWritableCalendarsArg, fromLocalAccountName: fromLocalAccountNameArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      retrieveCalendarsChannel.setMessageHandler(nil)
    }
    let deleteCalendarChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eventide.CalendarApi.deleteCalendar\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteCalendarChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let calendarIdArg = args[0] as! String
        api.deleteCalendar(calendarIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteCalendarChannel.setMessageHandler(nil)
    }
    let createEventChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eventide.CalendarApi.createEvent\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createEventChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let calendarIdArg = args[0] as! String
        let titleArg = args[1] as! String
        let startDateArg = args[2] as! Int64
        let endDateArg = args[3] as! Int64
        let isAllDayArg = args[4] as! Bool
        let descriptionArg: String? = nilOrValue(args[5])
        let urlArg: String? = nilOrValue(args[6])
        let remindersArg: [Int64]? = nilOrValue(args[7])
        api.createEvent(calendarId: calendarIdArg, title: titleArg, startDate: startDateArg, endDate: endDateArg, isAllDay: isAllDayArg, description: descriptionArg, url: urlArg, reminders: remindersArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createEventChannel.setMessageHandler(nil)
    }
    let createEventInDefaultCalendarChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eventide.CalendarApi.createEventInDefaultCalendar\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createEventInDefaultCalendarChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let titleArg = args[0] as! String
        let startDateArg = args[1] as! Int64
        let endDateArg = args[2] as! Int64
        let isAllDayArg = args[3] as! Bool
        let descriptionArg: String? = nilOrValue(args[4])
        let urlArg: String? = nilOrValue(args[5])
        let remindersArg: [Int64]? = nilOrValue(args[6])
        api.createEventInDefaultCalendar(title: titleArg, startDate: startDateArg, endDate: endDateArg, isAllDay: isAllDayArg, description: descriptionArg, url: urlArg, reminders: remindersArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createEventInDefaultCalendarChannel.setMessageHandler(nil)
    }
    let createEventThroughNativePlatformChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eventide.CalendarApi.createEventThroughNativePlatform\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createEventThroughNativePlatformChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let titleArg: String? = nilOrValue(args[0])
        let startDateArg: Int64? = nilOrValue(args[1])
        let endDateArg: Int64? = nilOrValue(args[2])
        let isAllDayArg: Bool? = nilOrValue(args[3])
        let descriptionArg: String? = nilOrValue(args[4])
        let urlArg: String? = nilOrValue(args[5])
        let remindersArg: [Int64]? = nilOrValue(args[6])
        api.createEventThroughNativePlatform(title: titleArg, startDate: startDateArg, endDate: endDateArg, isAllDay: isAllDayArg, description: descriptionArg, url: urlArg, reminders: remindersArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createEventThroughNativePlatformChannel.setMessageHandler(nil)
    }
    let retrieveEventsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eventide.CalendarApi.retrieveEvents\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      retrieveEventsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let calendarIdArg = args[0] as! String
        let startDateArg = args[1] as! Int64
        let endDateArg = args[2] as! Int64
        api.retrieveEvents(calendarId: calendarIdArg, startDate: startDateArg, endDate: endDateArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      retrieveEventsChannel.setMessageHandler(nil)
    }
    let deleteEventChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eventide.CalendarApi.deleteEvent\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteEventChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let eventIdArg = args[0] as! String
        api.deleteEvent(withId: eventIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteEventChannel.setMessageHandler(nil)
    }
    let createReminderChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eventide.CalendarApi.createReminder\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createReminderChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let reminderArg = args[0] as! Int64
        let eventIdArg = args[1] as! String
        api.createReminder(reminderArg, forEventId: eventIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createReminderChannel.setMessageHandler(nil)
    }
    let deleteReminderChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eventide.CalendarApi.deleteReminder\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteReminderChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let reminderArg = args[0] as! Int64
        let eventIdArg = args[1] as! String
        api.deleteReminder(reminderArg, withEventId: eventIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteReminderChannel.setMessageHandler(nil)
    }
    let createAttendeeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eventide.CalendarApi.createAttendee\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createAttendeeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let eventIdArg = args[0] as! String
        let nameArg = args[1] as! String
        let emailArg = args[2] as! String
        let roleArg = args[3] as! Int64
        let typeArg = args[4] as! Int64
        api.createAttendee(eventId: eventIdArg, name: nameArg, email: emailArg, role: roleArg, type: typeArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createAttendeeChannel.setMessageHandler(nil)
    }
    let deleteAttendeeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.eventide.CalendarApi.deleteAttendee\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteAttendeeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let eventIdArg = args[0] as! String
        let emailArg = args[1] as! String
        api.deleteAttendee(eventId: eventIdArg, email: emailArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteAttendeeChannel.setMessageHandler(nil)
    }
  }
}
